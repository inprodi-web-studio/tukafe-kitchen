// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: seerW9hP5yg4q6Ka6kucWa
// Component: TtHLkw-cCR0U
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  initializePlasmicStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import WorkItem from "../../WorkItem"; // plasmic-import: WMA5tJ2F_x-C/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: seerW9hP5yg4q6Ka6kucWa/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: TtHLkw-cCR0U/css
import FlechasEnCirculoSvgIcon from "./icons/PlasmicIcon__FlechasEnCirculoSvg"; // plasmic-import: 9eRAu6WYH1k1/icon

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "works",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          data: [],
          loading: false,
          refresh: 0
        })
      },
      {
        path: "workItem[].isConfirm",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "activeConfirm",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <SideEffect
            data-plasmic-name={"worksRequest"}
            data-plasmic-override={overrides.worksRequest}
            className={classNames("__wab_instance", sty.worksRequest)}
            deps={(() => {
              try {
                return [$state.works.refresh];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};
              $steps["loading"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.works.loading = true);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["loading"] != null &&
                typeof $steps["loading"] === "object" &&
                typeof $steps["loading"].then === "function"
              ) {
                $steps["loading"] = await $steps["loading"];
              }
              $steps["getRequest"] = true
                ? (() => {
                    const actionArgs = {
                      continueOnError: true,
                      dataOp: {
                        sourceId: "4HmiQ7TbnQsoscHLeGceTF",
                        opId: "1ec86949-a2e4-4e58-83f7-a6742a1f2f55",
                        userArgs: {
                          headers: [
                            `Bearer 78445fbc64d40826408f50653f9692f59da74b601bd3ec841acab680a038a1d81183ed56aa6c0a71790a3c142713274384030d61af59ab7420b1d2b330e93307b598ad67e7a2793e72b8eb007ae32f0237606997b7ae5053f28be4edd943a35c1293fde44436c4744f3c8ef1ab935b221911b2bc2dd21a639b8a6d443580b536`
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getRequest"] != null &&
                typeof $steps["getRequest"] === "object" &&
                typeof $steps["getRequest"].then === "function"
              ) {
                $steps["getRequest"] = await $steps["getRequest"];
              }
              $steps["handleResponse"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.works.data =
                            $steps.getRequest.data.response.data;
                          return ($state.works.loading = false);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["handleResponse"] != null &&
                typeof $steps["handleResponse"] === "object" &&
                typeof $steps["handleResponse"].then === "function"
              ) {
                $steps["handleResponse"] = await $steps["handleResponse"];
              }
            }}
          />

          <div
            data-plasmic-name={"topbar"}
            data-plasmic-override={overrides.topbar}
            className={classNames(projectcss.all, sty.topbar)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              hasGap={true}
              className={classNames(projectcss.all, sty.logo)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__eZTbs)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tu_kafe_kitchen/images/tukafeIdentidad35Png.png",
                  fullWidth: 701,
                  fullHeight: 1081,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jGxrg)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tu_kafe_kitchen/images/tukafeIdentidad28Png.png",
                  fullWidth: 1080,
                  fullHeight: 359,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              loading={(() => {
                try {
                  return $state.works.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              onClick={async () => {
                const $steps = {};
                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return $state.works.refresh++;
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              shape={"default"}
              size={"large"}
              type={"default"}
            >
              <FlechasEnCirculoSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </AntdButton>
          </div>
          {(() => {
            try {
              return (() => {
                return !$state.works.loading && $state.works.data.length > 0;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"itemsGrid"}
              data-plasmic-override={overrides.itemsGrid}
              className={classNames(projectcss.all, sty.itemsGrid)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.works.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const work = __plasmic_item_0;
                const workIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.workItem),
                    isConfirm: generateStateValueProp($state, [
                      "workItem",
                      __plasmic_idx_0,
                      "isConfirm"
                    ]),
                    key: workIndex,
                    onComplete: async () => {
                      const $steps = {};
                      $steps["removeItem"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const item = work;
                                  $state.activeConfirm === -1;
                                  $state.works.data.splice(workIndex, 1);
                                  return item;
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["removeItem"] != null &&
                        typeof $steps["removeItem"] === "object" &&
                        typeof $steps["removeItem"].then === "function"
                      ) {
                        $steps["removeItem"] = await $steps["removeItem"];
                      }
                      $steps["putRequest"] = true
                        ? (() => {
                            const actionArgs = {
                              continueOnError: true,
                              dataOp: {
                                sourceId: "4HmiQ7TbnQsoscHLeGceTF",
                                opId: "52901cd6-7729-45eb-b2f0-9e90d646ce3d",
                                userArgs: {
                                  path: [$steps.removeItem.documentId],
                                  body: [
                                    (() => {
                                      return { data: { isDone: true } };
                                    })()
                                  ],

                                  headers: [
                                    `Bearer 78445fbc64d40826408f50653f9692f59da74b601bd3ec841acab680a038a1d81183ed56aa6c0a71790a3c142713274384030d61af59ab7420b1d2b330e93307b598ad67e7a2793e72b8eb007ae32f0237606997b7ae5053f28be4edd943a35c1293fde44436c4744f3c8ef1ab935b221911b2bc2dd21a639b8a6d443580b536`
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["putRequest"] != null &&
                        typeof $steps["putRequest"] === "object" &&
                        typeof $steps["putRequest"].then === "function"
                      ) {
                        $steps["putRequest"] = await $steps["putRequest"];
                      }
                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return setTimeout(() => {
                                    const index = $state.workItem.findIndex(
                                      i => i.isConfirm
                                    );
                                    $state.workItem[index].isConfirm = false;
                                  }, 100);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    },
                    onIsConfirmChange: async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "workItem",
                        __plasmic_idx_0,
                        "isConfirm"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                      (async val => {
                        const $steps = {};
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return $state.workItem[workIndex].isConfirm
                                      ? ($state.activeConfirm = workIndex)
                                      : "";
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    work: (() => {
                      try {
                        return work;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {};
                        }
                        throw e;
                      }
                    })()
                  };
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "workItem[].isConfirm",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return $state.activeConfirm === workIndex;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <WorkItem
                      data-plasmic-name={"workItem"}
                      data-plasmic-override={overrides.workItem}
                      {...child$Props}
                    />
                  );
                })();
              })}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.works.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"skeletonGrid"}
              data-plasmic-override={overrides.skeletonGrid}
              className={classNames(projectcss.all, sty.skeletonGrid)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wzC6U,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___2YCgr,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lu2D5,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___2ZejQ,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__glSh1,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__asCcP,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__yaqG2,
                  "skeleton"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__vNxzL,
                  "skeleton"
                )}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return (() => {
                return !$state.works.loading && $state.works.data.length === 0;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"emptyData"}
              data-plasmic-override={overrides.emptyData}
              hasGap={true}
              className={classNames(projectcss.all, sty.emptyData)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__dCbsi)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"300px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tu_kafe_kitchen/images/tazaDeCafeVerde3DPng.png",
                  fullWidth: 2521,
                  fullHeight: 1733,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Sin \u00d3rdenes Pendientes por Realizar"}
              </div>
            </Stack__>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "worksRequest",
    "topbar",
    "logo",
    "button",
    "svg",
    "itemsGrid",
    "workItem",
    "skeletonGrid",
    "emptyData",
    "text"
  ],

  worksRequest: ["worksRequest"],
  topbar: ["topbar", "logo", "button", "svg"],
  logo: ["logo"],
  button: ["button", "svg"],
  svg: ["svg"],
  itemsGrid: ["itemsGrid", "workItem"],
  workItem: ["workItem"],
  skeletonGrid: ["skeletonGrid"],
  emptyData: ["emptyData", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "seerW9hP5yg4q6Ka6kucWa"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(makeNodeComponent("mainSection")),
  {
    // Helper components rendering sub-elements
    worksRequest: makeNodeComponent("worksRequest"),
    topbar: makeNodeComponent("topbar"),
    logo: makeNodeComponent("logo"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    itemsGrid: makeNodeComponent("itemsGrid"),
    workItem: makeNodeComponent("workItem"),
    skeletonGrid: makeNodeComponent("skeletonGrid"),
    emptyData: makeNodeComponent("emptyData"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
