/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: seerW9hP5yg4q6Ka6kucWa
// Component: WMA5tJ2F_x-C
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: seerW9hP5yg4q6Ka6kucWa/projectcss
import sty from "./PlasmicWorkItem.module.css"; // plasmic-import: WMA5tJ2F_x-C/css
import IconoDuotonoSvgIcon from "./icons/PlasmicIcon__IconoDuotonoSvg"; // plasmic-import: UjSd7EW9Px5w/icon

createPlasmicElementProxy;

export const PlasmicWorkItem__VariantProps = new Array();

export const PlasmicWorkItem__ArgProps = new Array(
  "isConfirm",
  "onIsConfirmChange",
  "onComplete",
  "work"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWorkItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          work: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isConfirm",
        type: "writable",
        variableType: "boolean",
        valueProp: "isConfirm",
        onChangeProp: "onIsConfirmChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"workItem"}
      data-plasmic-override={overrides.workItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.workItem
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lbM59)}>
        <div className={classNames(projectcss.all, sty.freeBox__zmBzg)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"customer"}
            data-plasmic-override={overrides.customer}
            hasGap={true}
            className={classNames(projectcss.all, sty.customer)}
          >
            <div
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames(projectcss.all, sty.avatar)}
            >
              <IconoDuotonoSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6M1Gw
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const { customer } = $props.work;
                      return customer;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Customer";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          {(() => {
            try {
              return $props.work.isOnline;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"onlineBadge"}
              data-plasmic-override={overrides.onlineBadge}
              hasGap={true}
              className={classNames(projectcss.all, sty.onlineBadge)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zwr1P)} />
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r5Os1
                )}
              >
                {"Online"}
              </div>
            </Stack__>
          ) : null}
        </div>
        {(() => {
          try {
            return $props.work.prepareIn;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__ftkBw)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1JOz
              )}
            >
              {"Preparar a las:"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__arUv
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const time = new Date($props.work.prepareIn);
                      const mexicoTime = new Date(
                        time.toLocaleString("en-US", {
                          timeZone: "America/Mexico_City"
                        })
                      );
                      const nowMexico = new Date(
                        new Date().toLocaleString("en-US", {
                          timeZone: "America/Mexico_City"
                        })
                      );
                      if (mexicoTime <= nowMexico) {
                        return "\xA1AHORA!";
                      }
                      const timeFormatter = new Intl.DateTimeFormat("es-MX", {
                        hour: "2-digit",
                        minute: "2-digit",
                        hour12: true,
                        timeZone: "America/Mexico_City"
                      });
                      return timeFormatter.format(time);
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Preparar a las:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7U1NP
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  const { product } = $props.work;
                  return product;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Producto";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(() => {
          try {
            return (() => {
              const { modificators } = $props.work;
              return modificators.length > 0;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"attributes"}
            data-plasmic-override={overrides.attributes}
            hasGap={true}
            className={classNames(projectcss.all, sty.attributes)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const { modificators } = $props.work;
                    return modificators;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const modificator = __plasmic_item_0;
              const modificatorIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"item"}
                  data-plasmic-override={overrides.item}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.item)}
                  key={modificatorIndex}
                >
                  {(() => {
                    try {
                      return modificator.value !== "No, Gracias";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wmD8J
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return modificator.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Fr\u00edo";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                </Stack__>
              );
            })}
          </Stack__>
        ) : null}
      </div>
      <AntdButton
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        danger={(() => {
          try {
            return $state.isConfirm;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onClick={async () => {
          const $steps = {};
          $steps["runOnConfirm"] = $state.isConfirm
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      $state.isConfirm = false;
                      return $props.onComplete();
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnConfirm"] != null &&
            typeof $steps["runOnConfirm"] === "object" &&
            typeof $steps["runOnConfirm"].then === "function"
          ) {
            $steps["runOnConfirm"] = await $steps["runOnConfirm"];
          }
          $steps["setConfirm"] = !$state.isConfirm
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      $state.isConfirm = true;
                      return setTimeout(() => {
                        $state.isConfirm = false;
                      }, 5000);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["setConfirm"] != null &&
            typeof $steps["setConfirm"] === "object" &&
            typeof $steps["setConfirm"].then === "function"
          ) {
            $steps["setConfirm"] = await $steps["setConfirm"];
          }
        }}
        size={"large"}
        type={"primary"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2TTdd
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.isConfirm ? "¿CONFIRMAR?" : "Completar";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Completar";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </AntdButton>
    </div>
  );
}

const PlasmicDescendants = {
  workItem: [
    "workItem",
    "customer",
    "avatar",
    "svg",
    "onlineBadge",
    "attributes",
    "item",
    "button"
  ],

  customer: ["customer", "avatar", "svg"],
  avatar: ["avatar", "svg"],
  svg: ["svg"],
  onlineBadge: ["onlineBadge"],
  attributes: ["attributes", "item"],
  item: ["item"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkItem__ArgProps,
          internalVariantPropNames: PlasmicWorkItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWorkItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "workItem") {
    func.displayName = "PlasmicWorkItem";
  } else {
    func.displayName = `PlasmicWorkItem.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkItem = Object.assign(
  // Top-level PlasmicWorkItem renders the root element
  makeNodeComponent("workItem"),
  {
    // Helper components rendering sub-elements
    customer: makeNodeComponent("customer"),
    avatar: makeNodeComponent("avatar"),
    svg: makeNodeComponent("svg"),
    onlineBadge: makeNodeComponent("onlineBadge"),
    attributes: makeNodeComponent("attributes"),
    item: makeNodeComponent("item"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicWorkItem
    internalVariantProps: PlasmicWorkItem__VariantProps,
    internalArgProps: PlasmicWorkItem__ArgProps
  }
);

export default PlasmicWorkItem;
/* prettier-ignore-end */
